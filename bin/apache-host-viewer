#!/bin/bash

# ------------
# An apache host viewer to list all provided host and vhosts on current system.
#
# @author    Björn Hempel <bjoern@hempel.li>
# @version   1.0 (2017-05-12)
#
# @copyright MIT License
# @copyright
# @copyright Copyright (c) 2017 Björn Hempel
# @copyright
# @copyright Permission is hereby granted, free of charge, to any person obtaining a copy
# @copyright of this software and associated documentation files (the "Software"), to deal
# @copyright in the Software without restriction, including without limitation the rights
# @copyright to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# @copyright copies of the Software, and to permit persons to whom the Software is
# @copyright furnished to do so, subject to the following conditions:
# @copyright
# @copyright The above copyright notice and this permission notice shall be included in all
# @copyright copies or substantial portions of the Software.
# @copyright
# @copyright THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# @copyright IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# @copyright FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# @copyright AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# @copyright LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# @copyright OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# @copyright SOFTWARE.
# @copyright
# @copyright Written by Björn Hempel <bjoern@hempel.li>.
# ------------

# makes the regexp search case insensitive
shopt -s nocasematch

# config: max result
maxResult=0

# include the libraries
if [ -h "${BASH_SOURCE[0]}" ]; then
    filename=$(readlink "${BASH_SOURCE[0]}")
    pathRoot=$(dirname "$filename")"/.."
else
    pathRoot="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/.."
fi

# get the scriptname
if [[ "${BASH_SOURCE[0]}" =~ "/usr/local/bin" ]]; then
    scriptname=$(basename "${BASH_SOURCE[0]}")
else
    scriptname="${BASH_SOURCE[0]}"
fi

# include some libraries
source "$pathRoot/lib/functions"
source "$pathRoot/lib/docker"
source "$pathRoot/lib/parameter"

# check the current used user
userId=$(id -u)

# the command apachectl needs root credentials
if [[ $userId -ne 0 ]]; then
    echo "Please run this script as root."
    echo "sudo $0 ..."
    exit 1
fi

# get external ip
externalIp=$(getExternalIp)

# save all hosts including the scheme within this container
declare -A schemeHostsContainer
declare -A schemeHostsUnassignedContainer
declare -A nameContainer

if $PARSE_VHOSTS; then
    if [ "$DOCKER_NAME" == "" ] && ! applicationExists apachectl; then
        echo 'It seems that the apache is not installed on this system. Do this before continue.' && exit
    fi

    lines=$(executeLocallyOrOnDocker "apachectl -S | grep -E \"(namevhost|alias)\"" "$DOCKER_NAME")
    serverRoot=$(executeLocallyOrOnDocker "apachectl -S | grep ServerRoot | awk '{print \$2}' | sed -e 's/\"//g'" "$DOCKER_NAME")

    # last port, last domain, last config, last path, last line, last virtual host, last target uri, last last status
           port=""
         domain=""
         config=""
           path=""
           line=""
    virtualHost=""
      targetUri=""
     lastStatus=""

    # split lines from apachectl config output
    lineArray=()
    while read -r line; do
        lineArray+=("$line")
    done <<< "$lines"

    # iterate through the returned virtual hosts configs from apachectl
    loopCounter=0
    for line in "${lineArray[@]}"; do
        alias=$(echo "$line" | grep "alias")

        if [ "$alias" != "" ]; then
            domain=$(echo "$line" | awk '{print $2}')
        else
            ((loopCounter++))

            if [ $maxResult -gt 0 ] && [ $loopCounter -gt $maxResult ]; then
                break
            fi

              port=$(echo "$line" | awk '{print $2}')
            domain=$(echo "$line" | awk '{print $4}')
            config=$(echo "$line" | awk '{print $5}')

                path=$(shopt -s nocasematch && [[ "$config" =~ \(([./a-z0-9\-]+) ]] && echo "${BASH_REMATCH[1]}")
            lineFrom=$(shopt -s nocasematch && [[ "$config" =~ :([0-9]+)\) ]] && echo "${BASH_REMATCH[1]}")

            virtualHost=$(getVirtualHost "$path" $lineFrom "/etc/apache2" "$DOCKER_NAME")
              targetUri=$(getTargetFromVirtualHost "$virtualHost")
             lastStatus=$?
        fi

        if [ $lastStatus -gt 0 ]; then
            continue
        fi

        # translate domain
        if [[ "$domain" =~ xn-- ]]; then
            # check that idn is installed
            if ! applicationExists idn; then
                echo 'The package "idn" is not installed. Please install this package before continue:'
                echo '$ sudo apt install idn'
                exit
            fi

            domain=$(echo "$domain" | idn --idna-to-unicode)
        fi

        # add protocol to domain
        if [ $port -eq 443 ]; then
            domain="https://$domain"
        else
            domain="http://$domain"
        fi

        # collect domain names
        currentDomainString="${schemeHostsContainer[$targetUri]}"
        if [ "$currentDomainString" != "" ]; then
            schemeHostsContainer[$targetUri]="$currentDomainString"$'\n'"$domain"
        else
            schemeHostsContainer[$targetUri]="$domain"
        fi

        # check assignment status
        currentDomainUnassigedString="${schemeHostsUnassignedContainer[$targetUri]}"
                            ipDomain=$(getIpFromDomain "$domain")

        if [ "$externalIp" != "$ipDomain" ]; then
            if [ "$currentDomainUnassigedString" != "" ]; then
                schemeHostsUnassignedContainer[$targetUri]="$currentDomainUnassigedString"$'\n'"$domain"
            else
                schemeHostsUnassignedContainer[$targetUri]="$domain"
            fi
        fi

        # add project name
        projectName=$(getProjectNameFromVirtualHost "$virtualHost")
         lastStatus=$?

        if [ $lastStatus -eq 0 ]; then
            if [ -z "${nameContainer[$targetUri]}" ]; then
                nameContainer[$targetUri]="$projectName"
            fi
        fi
    done
fi

# write markdown/json/html file
if [ "$OUTPUT_TARGET" != "" ]; then
    markdownFile="$OUTPUT_TARGET/$OUTPUT_NAME.$MARKDOWN_SUFFIX"
    jsonFile="$OUTPUT_TARGET/$OUTPUT_NAME.$JSON_SUFFIX"
    htmlFile="$OUTPUT_TARGET/$OUTPUT_NAME.$HTML_SUFFIX"

    # create md and/or html file
    if $CREATE_MARKDOWN || $CREATE_HTML; then
        markdownOutput=$(getMarkdownOfSystemAndDocumentRoots)

        echo "$markdownOutput" > "$markdownFile.~tmp"

        # create html from md file
        if $CREATE_HTML; then
            md2htmlFile "$markdownFile.~tmp" "$htmlFile"
        fi

        # create md file
        if $CREATE_MARKDOWN; then
            mv "$markdownFile.~tmp" "$markdownFile"
        else
            rm "$markdownFile.~tmp"
        fi
    fi

    # create json file
    if $CREATE_JSON; then
        jsonOutput=$(getJsonOfSystemAndDocumentRoots)
        echo "$jsonOutput" > $jsonFile
    fi
fi

# markdown output
if ! $SILENCE && $MARKDOWN_OUTPUT; then
    markdownOutput=$(getMarkdownOfSystemAndDocumentRoots)
    echo "$markdownOutput"
fi

# json output
if ! $SILENCE && $JSON_OUTPUT; then
    jsonOutput=$(getJsonOfSystemAndDocumentRoots)

    if $COMPRESS_JSON; then
        jsonOutput=$(compressJson "$jsonOutput")
    fi

    echo "$jsonOutput"
fi

if ! $SILENCE && $HTML_OUTPUT; then
    markdownOutput=$(getMarkdownOfSystemAndDocumentRoots)

    htmlOutput=$(md2html "$markdownOutput")

    echo "$htmlOutput"
fi

