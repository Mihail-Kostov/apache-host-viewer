#!/bin/bash

# ------------
# Returns a file system safe string.
#
# @author  Björn Hempel  <bjoern@hempel.li>
# @version 1.0 (2017-06-03)
# ------------
getFileSystemSafeString()
{
    local replacer=${2:--}

    echo "$1" | sed 's@://@~@g' | sed "s/[^A-Za-z0-9\.\-~]/${replacer}/g" | sed "s/[${replacer}]\+/${replacer}/g" | tr '[A-Z]' '[a-z]'
}

# ------------
# Returns the target uri config name.
#
# @author  Björn Hempel  <bjoern@hempel.li>
# @version 1.0 (2017-06-03)
# ------------
getTargetUriConfigName()
{
    local targetUriFileSystemSafe=$(getFileSystemSafeString "$2")

    targetUriFileSystemSafe=$(echo "$targetUriFileSystemSafe" | sed 's@^file~-var-www-@@')
    targetUriFileSystemSafe=$(echo "$targetUriFileSystemSafe" | sed 's~-web$~~')
    targetUriFileSystemSafe=$(echo "$targetUriFileSystemSafe" | sed 's~-current$~~')
    targetUriFileSystemSafe=$(echo "$targetUriFileSystemSafe" | sed 's~-html$~~')

    echo "$1/$targetUriFileSystemSafe"
}

# ------------
# Gets the load average status.
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0 (2017-05-30)
# ------------
getLoadAverageStatus()
{
    local errorPercent="1.0"
    local  warnPercent="0.8"

    local  loadavg1min=$(getLoadAverage1min)
    local  loadavg5min=$(getLoadAverage5min)
    local loadavg15min=$(getLoadAverage15min)

    local numberOfCpus=$(getNumberOfCpus)
    local errorNumber=$(echo "$numberOfCpus * $errorPercent" | bc)
    local  warnNumber=$(echo "$numberOfCpus * $warnPercent"  | bc)

    # critical status
    if [ $(echo $loadavg1min'>'$errorNumber | bc -l) == "1" ] || [ $(echo $loadavg5min'>'$errorNumber | bc -l) == "1" ] || [ $(echo $loadavg15min'>'$errorNumber | bc -l) == "1" ]; then
        echo 'critical'
        return 0
    fi

    # warn status
    if [ $(echo $loadavg1min'>'$warnNumber | bc -l) == "1" ] || [ $(echo $loadavg5min'>'$warnNumber | bc -l) == "1" ] || [ $(echo $loadavg15min'>'$warnNumber | bc -l) == "1" ]; then
        echo 'warn'
        return 0
    fi

    # ok status
    echo 'ok'
    return 0
}

# ------------
# Gets the unassigned domain status.
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0 (2017-06-02)
# ------------
getUnassignedDomainStatus()
{
    for target in "${!schemeHostsUnassignedContainer[@]}"; do
        if [ "${schemeHostsUnassignedContainer[$target]}" != "" ]; then
            readarray -t schemeHostsUnassiged <<< "${schemeHostsUnassignedContainer[$target]}"

            if [ ${#schemeHostsUnassiged[@]} -gt 0 ]; then
                echo "warn"
                return 0
            else
                echo "ok"
                return 0
            fi
        fi
    done

    echo "ok"
    return 0
}

# ------------
# Gets the overall status.
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0 (2017-05-30)
# ------------
getOverallStatus()
{
    # check for critical status
    for status in "$@"; do
        if [ "$status" == "critical" ]; then
            echo "critical"
            return 0
        fi
    done

    # check for warn status
    for status in "$@"; do
        if [ "$status" == "warn" ]; then
            echo "warn"
            return 0
        fi
    done

    echo 'ok'
    return 0
}

# ------------
# Gets all users.
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0 (2017-05-14)
# ------------
getUsers()
{
    cat /etc/passwd | grep ':[0-9]\+:100:' | awk -F: '{ st = index($0,":"); print $1}'
}

# ------------
# Gets the full name of given user.
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0 (2017-05-23)
# ------------
getFullnameFromUser()
{
    getent passwd "$1" | cut -d ':' -f 5 | cut -d ',' -f 1
}

# ------------
# Gets the php version
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0 (2017-05-23)
# ------------
getPhpVersion()
{
    php -v | grep -E "PHP [0-9]" | awk '{print $2}'
}

# ------------
# Gets the mysql version
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0 (2017-05-23)
# ------------
getMysqlVersion()
{
    mysql --version | awk '{print $5}' | sed -E 's/,$//'
}

# ------------
# Gets the os name and version.
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0 (2017-05-14)
# ------------
getOSName()
{
    OS=$(uname -s)
    REV=$(uname -r)
    MACH=$(uname -m)

    if [ "${OS}" = "SunOS" ] ; then
        OS=Solaris
        ARCH=$(uname -p)
        OSSTR="${OS} ${REV}(${ARCH} $(uname -v))"
    elif [ "${OS}" = "AIX" ] ; then
        OSSTR="${OS} $(oslevel) ($(oslevel -r))"
    elif [ "${OS}" = "Linux" ] ; then
        KERNEL=$(uname -r)
        if [ -f /etc/redhat-release ] ; then
            DIST='RedHat'
            PSUEDONAME=$(cat /etc/redhat-release | sed s/.*\(// | sed s/\)//)" "
            REV=$(cat /etc/redhat-release | sed s/.*release\ // | sed s/\ .*//)
        elif [ -f /etc/SuSE-release ] ; then
            DIST=$(cat /etc/SuSE-release | tr "\n" ' '| sed s/VERSION.*//)
            REV=$(cat /etc/SuSE-release | tr "\n" ' ' | sed s/.*=\ //)
        elif [ -f /etc/mandrake-release ] ; then
            DIST='Mandrake'
            PSUEDONAME=$(cat /etc/mandrake-release | sed s/.*\(// | sed s/\)//)" "
            REV=$(cat /etc/mandrake-release | sed s/.*release\ // | sed s/\ .*//)
        elif [ -f /etc/debian_version ] ; then
            DIST="Debian $(cat /etc/debian_version)"
            REV=""
        fi
        if [ -f /etc/UnitedLinux-release ] ; then
            DIST="${DIST}[$(cat /etc/UnitedLinux-release | tr "\n" ' ' | sed s/VERSION.*//)]"
        fi

        OSSTR="${OS} ${DIST} ${REV}(${PSUEDONAME}${KERNEL} ${MACH})"
    fi

    echo ${OSSTR}
}

# ------------
# Gets the number of updateable applications.
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0 (2017-05-14)
# ------------
getNumberOfInstallableApplications()
{
    aptitude search '~U' | wc -l
}

# ------------
# Returns the internal ip address.
#
# @author  Björn Hempel
# @version 1.0
# ------------
getInternalIp ()
{
    # get from first ip address
    local ip=$(/sbin/ifconfig | grep -E 'inet (addr|Adresse):' | awk '{print $2}' | sed -E 's/(Adresse|addr)://' | grep -v '127.0.0.1' | head -n 1)

    echo $ip
}

# ------------
# Returns external ip address.
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0
# ------------
getExternalIp()
{
    local ip=$(curl --insecure -s https://api.ipify.org)

    echo "$ip"
}

# ------------
# Returns the ip from given domain (dig).
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0 (2017-06-01)
# ------------
getIpFromDomain()
{
    local domain=$(echo "$1" | sed 's/^http[s]\?:\/\///i')

    local ip=$(dig "$domain" +short)

    echo "$ip"
}

# ------------
# Returns a markdown of system informations and document roots.
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0 (2017-05-14)
# ------------
getMarkdownOfSystemAndDocumentRoots()
{
    echo '# Host "'$(hostname)'"'
    echo

    if $SHOW_SYSTEM_INFORMATIONS; then
        local loadAverageStatus=$(getLoadAverageStatus)
        local hdSizeStatus=$(getHdUsedPercentStatus)
        local unassignedDomainStatus=$(getUnassignedDomainStatus)
        local overallStatus=$(getOverallStatus "$loadAverageStatus" "$hdSizeStatus" "$unassignedDomainStatus" "$sslOverallStatus")
        local apps=$(friends-of-bash list)

        echo '## System status'
        echo
        echo '- **overall status:** '$overallStatus
        echo '- **detailed:**'
        echo '  - **load average status:** '$loadAverageStatus
        echo '  - **disc size available status:** '$hdSizeStatus
        echo '  - **unassigned domain status:** '$unassignedDomainStatus
        echo '  - **ssl certificate status:** '$sslOverallStatus
        echo

        echo '## System informations'
        echo
        echo '| Name | Value |'
        echo '| ---- | ----- |'
        echo '| document created at | '$(date "+%Y-%m-%d %H:%M:%S")' |'
        echo '| full os name | '$(getOSName)' |'
        echo '| hostname | '$(hostname)' |'
        echo '| number of cpus | '$(getNumberOfCpus)' |'
        echo '| ram size in gb | '$(getRamSizeGb)' |'
        echo '| hd disc size in gb | '$(getHdSizeGb)' |'
        echo '| used hd disc size | '$(getHdUsedPercent)' % |'
        echo '| internal ip address | '$(getInternalIp)' |'
        echo '| external ip address | '$(getExternalIp)' |'
        echo '| number of updateable applications | '$(getNumberOfInstallableApplications)' |'
        echo '| php version | '$(getPhpVersion)' |'
        echo '| mysql version | '$(getMysqlVersion)' |'
        echo '| load average | '$(getLoadAverage1min)' '$(getLoadAverage5min)' '$(getLoadAverage15min)' |'
        echo

        if ! applicationExists "jq"; then
            >&2 echo "Application jq was not found. Please install it before with:"
            >&2 echo "user$ sudo apt install jq"
        else
            echo '## Applications'
            echo
            while read line; do
                local name=$(echo "$line" | sed 's/ - \(.\)\+$//g')
                local version=$(echo "$line" | sed 's/^\(.\)\+ - //g')

                local updateAvailable=$(friends-of-bash updateAvailable "$name")

                local updateText="The app is up to date."

                [ "$updateAvailable" == "1" ] && updateText="There is an update available."

                echo "- **$version**"
                echo "  - Update: $updateText"
            done <<< "$apps"
            echo
        fi

        echo '## Users'
        echo

        echo '| Username | Fullname |'
        echo '| ---- | ----- |'

        local users=$(getUsers)
        while read -r user; do
            local fullname=$(getFullnameFromUser "$user")
            echo "| $user | $fullname |"
        done <<< "$users"

        echo 
    fi

    echo '## Projects'
    echo
    for target in "${!schemeHostsContainer[@]}"; do
        eval "declare -A project="$(analyzeProject "$target")

        if [ -z "${nameContainer[$target]}" ]; then
            local projectName=$target
        else
            local projectName=${nameContainer[$target]}
        fi

        echo "- $projectName"

        readarray -t schemeHosts <<< "${schemeHostsContainer[$target]}"

        local ssl=false

        if [ ${#schemeHosts[@]} -le 1 ]; then
            echo "  - domain: ${schemeHosts[0]}"
            [[ "${schemeHosts[0]}" =~ ^https ]] && ssl=true
        else
            echo "  - domains:"
            for schemeHost in "${schemeHosts[@]}"; do
                echo "    - $schemeHost"
                [[ "$schemeHost" =~ ^https ]] && ssl=true
            done
        fi

        if [ "${schemeHostsUnassignedContainer[$target]}" != "" ]; then
            readarray -t schemeHostsUnassiged <<< "${schemeHostsUnassignedContainer[$target]}"

            if [ ${#schemeHostsUnassiged[@]} -le 1 ]; then
                echo "  - unassigned domain: ${schemeHostsUnassiged[0]}"
            else
                echo "  - unassigned domains:"
                for schemeHostUnassiged in "${schemeHostsUnassiged[@]}"; do
                    echo "    - $schemeHostUnassiged"
                done
            fi
        fi

        echo "  - target: $target"
        echo "  - ssl: "$($ssl && echo 'true' || echo 'false')
        echo "  - app: ${project[app]}"
        echo "  - version: ${project[version]}"
        echo "  - apache config: ${pathContainer[$target]}"
    done
    echo

    if $SHOW_SSL_CERTIFICATES; then
        echo '## SSL Certificates'
        echo
        echo "$sslDomains" | while read domain; do
            echo "- $domain"
            echo "  - issuer: ${sslIssuer[$domain]}"
            echo "  - validDays: ${sslValidDays[$domain]}"
            echo "  - validUntil: ${sslValidUntil[$domain]}"
            echo "  - status:"
            echo "    - overall: ${sslStatus[$domain]}"
            echo "    - detailed:"
            echo "      - certificateStatus: ${sslCertificateVerifiedStatus[$domain]}"
            echo "      - chainCertificateStatus: ${sslChainCertificateVerifiedStatus[$domain]}"
            echo "      - certificateValidStatus: ${sslCertificateValidStatus[$domain]}"
            echo "      - domainFromCertificateStatus: ${sslDomainFromCertificateStatus[$domain]}"
            echo "      - statusOcspOkStatus: ${sslStatusOcspOkStatus[$domain]}"
        done
        echo
    fi

    if $SHOW_LINKS; then
        echo '## Links'
        echo
        if $CREATE_JSON; then
            echo "Show this document as json file: [$OUTPUT_NAME.$JSON_SUFFIX]($OUTPUT_NAME.$JSON_SUFFIX)"
        fi
        echo "Show this document as markdown file: [$OUTPUT_NAME.$MARKDOWN_SUFFIX]($OUTPUT_NAME.$MARKDOWN_SUFFIX)"
        echo
    fi
}

# ------------
# Returns a json of system informations and document roots.
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0 (2017-05-14)
# ------------
getJsonOfSystemAndDocumentRoots()
{
    echo '{'

    if $SHOW_SYSTEM_INFORMATIONS; then
        local loadAverageStatus=$(getLoadAverageStatus)
        local hdSizeStatus=$(getHdUsedPercentStatus)
        local unassignedDomainStatus=$(getUnassignedDomainStatus)
        local overallStatus=$(getOverallStatus "$loadAverageStatus" "$hdSizeStatus" "$unassignedDomainStatus" "$sslOverallStatus")
        local apps=$(friends-of-bash list)

        echo '    "created-at-formated":           "'$(date "+%Y-%m-%d %H:%M:%S")'",'
        echo '    "created-at":                    "'$(date "+%s")'",'
        echo '    "os-name-full":                  "'$(getOSName)'",'
        echo '    "hostname":                      "'$(hostname)'",'
        echo '    "number-of-cpus":                "'$(getNumberOfCpus)'",'
        echo '    "ram-size-gb":                   "'$(getRamSizeGb)'",'
        echo '    "hd-size-gb":                    "'$(getHdSizeGb)'",'
        echo '    "hd-size-used-percent":          "'$(getHdUsedPercent)'",'
        echo '    "internal-ip-address":           "'$(getInternalIp)'",'
        echo '    "external-ip-address":           "'$(getExternalIp)'",'
        echo '    "updateable-application-number": "'$(getNumberOfInstallableApplications)'",'
        echo '    "php-version":                   "'$(getPhpVersion)'",'
        echo '    "mysql-version":                 "'$(getMysqlVersion)'",'
        echo '    "applications":                  {'
        local counter=0
        while read line; do
            local            name=$(echo "$line" | sed 's/ - \(.\)\+$//g')
            local         version=$(echo "$line" | sed 's/^\(.\)\+ - //g')
            local updateAvailable=$(friends-of-bash updateAvailable "$name")
            [ $counter -gt 0 ] && echo ","
            echo '                                         "'$version'": {'
            echo '                                             "updateable": "'$updateAvailable'"'
            echo -n '                                         }'
            ((counter++))
        done <<< "$apps"
        echo
        echo '                                     },'
        echo '    "load-average":                  {'
        echo '                                         "1":                 "'$(getLoadAverage1min)'",'
        echo '                                         "5":                 "'$(getLoadAverage5min)'",'
        echo '                                         "15":                "'$(getLoadAverage15min)'"'
        echo '                                     },'
        echo '    "status":                        {'
        echo '                                         "overall":  "'$overallStatus'",'
        echo '                                         "detailed": {'
        echo '                                                         "load-average":      "'$loadAverageStatus'",'
        echo '                                                         "space-available":   "'$hdSizeStatus'",'
        echo '                                                         "unassigned-domain": "'$unassignedDomainStatus'",'
        echo '                                                         "ssl-certificate":   "'$sslOverallStatus'"'
        echo '                                                     }'
        echo '    },'

        local users=$(getUsers)
        echo '    "users":                         {'
        local counter=0
        while read -r user; do
            local fullname=$(getFullnameFromUser "$user")
            [ $counter -gt 0 ] && echo ","
            echo -n "                                         \"$user\": \"$fullname\""
            ((counter++))
        done <<< "$users"
        echo
        echo '                                     },'
    fi

    echo '    "projects":                      ['
    local counter=0
    for target in "${!schemeHostsContainer[@]}"; do
        eval "declare -A project="$(analyzeProject "$target")

        [ $counter -gt 0 ] && echo ","
        echo    "                                         {"
        if [ ! -z "${nameContainer[$target]}" ]; then
            echo    "                                             \"name\": \"${nameContainer[$target]}\","
        fi
        echo    "                                             \"domains\": ["

        readarray -t schemeHosts <<< "${schemeHostsContainer[$target]}"
        local ssl=false

        local counter2=0
        for schemeHost in "${schemeHosts[@]}"; do
            [ $counter2 -gt 0 ] && echo ","
            echo -n "                                                 \"$schemeHost\""
            ((counter2++))

            [[ "$schemeHost" =~ ^https ]] && ssl=true
        done
        echo
        echo    "                                             ],"
        echo    "                                             \"target\": \"$target\","
        echo    "                                             \"ssl\": "$($ssl && echo 'true' || echo 'false')","
        echo    "                                             \"app\": \"${project[app]}\","
        echo    "                                             \"version\": \"${project[version]}\","
        echo    "                                             \"apache-config\": \"${pathContainer[$target]}\""
        echo -n "                                         }"
        ((counter++))
    done
    echo
    echo '                                     ],'

    echo '    "ssl-certificates":              {'
    local counter=0
    echo "$sslDomains" | while read domain; do
        [ $counter -gt 0 ] && echo ","
        echo    "                                         \"$domain\": {"
        echo    "                                             \"issuer\": \"${sslIssuer[$domain]}\","
        echo    "                                             \"valid-days\": \"${sslValidDays[$domain]}\","
        echo    "                                             \"valid-until\": \"${sslValidUntil[$domain]}\","
        echo    "                                             \"status\": {"
        echo    "                                                 \"overall\": \"${sslStatus[$domain]}\","
        echo    "                                                 \"detailed\": {"
        echo    "                                                     \"certificate\": \"${sslCertificateVerifiedStatus[$domain]}\","
        echo    "                                                     \"chain-certificate\": \"${sslChainCertificateVerifiedStatus[$domain]}\","
        echo    "                                                     \"valid\": \"${sslCertificateValidStatus[$domain]}\","
        echo    "                                                     \"domain-from-certificate\": \"${sslDomainFromCertificateStatus[$domain]}\","
        echo    "                                                     \"status-ocsp\": \"${sslStatusOcspOkStatus[$domain]}\""
        echo    "                                                 }"
        echo    "                                             }"
        echo -n "                                         }"
        ((counter++))
    done
    echo
    echo '                                     }'

    echo '}'
}

# ------------
# Compress given json string.
#
# @author  Björn Hempel
# @version 1.0 (2017-05-05)
# ------------
compressJson()
{
    local json="$1"

    echo -n "$json" | sed 's/^[ \t]*//' | sed ':a;N;$!ba;s/\n//g' | sed 's/:[ ]\+"/:"/g' | sed 's/:[ ]\+\[/:\[/g' | sed 's/:[ ]\+{/:{/g'
}

# ------------
# Converts the given md file into a html file.
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0 (2017-05-28)
# ------------
md2html()
{
    local  markdownContent="$1"
    local          cssFile="${2:-markdown.css}"
    local     completeHtml=${3:-true}
    local       servername=$(hostname)
    local markdown2HtmlApp="markdown"
    local        tmpMdFile=$(mktemp)

    # check if markdown app exists
    if ! applicationExists "$markdown2HtmlApp"; then
        >&2 echo "Application $markdown2HtmlApp does not exist on this system. Please install with:"
        >&2 echo
        >&2 echo "user$ curl -sL https://deb.nodesource.com/setup_7.x | sudo -E bash -"
        >&2 echo "user$ sudo apt install nodejs"
        >&2 echo "user$ sudo npm install markdown-to-html -g"
        return 2
    fi

    # markdown html before
    read -d '' head <<EndOfMessage
<!DOCTYPE html>
<html lang="en">
    <head>
        <!--[if IE]>
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <![endif]-->
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <meta charset="UTF-8" />
        <title>$servername</title>
        <link rel="stylesheet" href="$cssFile">
        <style>
            .markdown-body {
                box-sizing: border-box;
                min-width: 200px;
                max-width: 980px;
                margin: 0 auto;
                padding: 45px;
            }
        </style>
    </head>
    <body>
        <article class="markdown-body">
EndOfMessage

    # markdown html after
    read -d '' footer <<EndOfMessage
        </article>
    </body>
</html>
EndOfMessage

    # create temporary md file
    echo "$markdownContent" > "$tmpMdFile"

    # some changes with markdown
    content=$(markdown "$tmpMdFile" -h)
    # | sed -e 's/<table>/<table style="width:100%;">/g')

    # remove temp markdown file
    rm "$tmpMdFile"

    # write html index file
    if $completeHtml; then
        echo "$head"
    fi
    echo "$content"
    if $completeHtml; then
        echo "$footer"
    fi

    # return 0
    return 0
}

# ------------
# Converts the given md file into a html file.
#
# @author  Björn Hempel <bjoern@hempel.li>
# @version 1.0 (2017-05-28)
# ------------
md2htmlFile()
{
    local markdownFile="$1"
    local    indexFile="$2"
    local completeHtml=${3:-true}
    local   targetPath=$(dirname "$indexFile")

    local          cssFile="https://raw.githubusercontent.com/sindresorhus/github-markdown-css/gh-pages/github-markdown.css"
    local          cssName="markdown.css"
    local      cssFullpath="$targetPath/$cssName"

    # download css file
    if [ ! -f "$cssFullpath" ]; then
        wget -O "$cssFullpath" --quiet "$cssFile"
    fi

    # check css file
    if [ ! -f "$cssFullpath" ]; then
        echo "It was not able to download the css file \"$cssFullpath\"."
        return 1
    fi

    # convert the markdown content into html content
    markdownContent=$(cat "$markdownFile")
    htmlContent=$(md2html "$markdownContent" "$cssName" $completeHtml)

    # write html index file
    echo "$htmlContent" > $indexFile

    # return 0
    return 0
}


# ------------
# Analyzes the given project path and tries to find out the app and version number.
#
# @author  Björn Hempel
# @version 1.0 (2017-05-23)
# ------------
analyzeProject()
{
    local uri="$1"

    local scheme=""
    local   path="$uri"

    local     app='unknown'
    local version='unknown'

    # the return array
    declare -A ret=()

    # check the uri
    if [[ "$uri" =~ ^([a-z]+)://(.+) ]]; then
        scheme="${BASH_REMATCH[1]}"
        path="${BASH_REMATCH[2]}"
    fi

    # redirection or proxy-pass
    if [[ "$scheme" =~ ^http ]]; then
            ret[app]='redirection'
        ret[version]='not available'

        local retDeclare=$(declare -p ret)

        echo "${retDeclare#*=}"
        return 0
    fi

    # path does not exist
    if [ ! -d "$path" ]; then
        # return array¬
        declare -A ret=()
            ret[app]='not available'
        ret[version]='not available'

        local retDeclare=$(declare -p ret)

        echo "${retDeclare#*=}"
        return 1
    fi

    # some vars
    local projectPath="$path"
    local  startPath=$(pwd)
    cd "$projectPath"

    # contao
    if [ "$app" == "unknown" ] && [ -d "contao" ] && [ -f "system/config/constants.php" ]; then
        app='Contao'
        version=$(php -r 'include_once "system/config/constants.php"; echo VERSION;')
    fi

    # symfony
    if [ "$app" == "unknown" ] && [ -f "app.php" ] && [ -d "../app" ]; then
        cd ..
    fi
    if [ "$app" == "unknown" ] && [ -d "app" ] && [ -f "app/console" ]; then
        app='Symfony'
        version=$(app/console --version | awk '{print $3}' | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g")
    fi

    # TYPO3
    if [ "$app" == "unknown" ] && ([ -d "typo3_src/typo3" ] || [ -d "typo3" ]); then
        app='TYPO3'
        version="unknown"

        local typo3src=""
        [ -d "typo3_src/typo3" ] && typo3src="typo3_src/typo3"
        [ -d "typo3"           ] && typo3src="typo3"

        pathSystemEnvironmentBuilder="$typo3src/sysext/core/Classes/Core/SystemEnvironmentBuilder.php"
        if [ -f "$pathSystemEnvironmentBuilder" ]; then
            version=$([[ $(grep --no-filename -r "define('TYPO3_version'" "$pathSystemEnvironmentBuilder") =~ TYPO3_version\',[[:space:]]*\'([^\']*) ]] && echo ${BASH_REMATCH[1]})
        fi
    fi

    # Wordpress
    if [ "$app" == "unknown" ] && [ -d "wordpress" ]; then
        cd "wordpress"
    fi
    if [ "$app" == "unknown" ] && [ -d "wp-admin" ]; then
        app='Wordpress'
        version='unknown'

        versionFile='wp-includes/version.php'
        if [ -f "$versionFile" ]; then
            version=$([[ $(grep --no-filename -r "\$wp_version =" "$versionFile") =~ wp_version[[:space:]]*=[[:space:]]*\'([^\']*) ]] && echo ${BASH_REMATCH[1]})
        fi
    fi

    # Dresden Frontend Tool
    if [ "$app" == "unknown" ] && [ -d "dd-fe-tool" ]; then
        app='DD Frontend Tool (Silex)'

        cd "dd-fe-tool"

        versionFile='vendor/silex/silex/src/Silex/Application.php'
        if [ -f "$versionFile" ]; then
            version=$([[ $(grep --no-filename -r "VERSION =" "$versionFile") =~ VERSION[[:space:]]*=[[:space:]]*\'([^\']*) ]] && echo ${BASH_REMATCH[1]})
        fi
    fi

    # index.php
    if [ "$app" == "unknown" ] && [ -f "index.php" ]; then
        app='PHP project'
        version='PHP '$(php -v | grep -E "PHP [0-9]" | awk '{print $2}')
    fi

    # index.html
    if [ "$app" == "unknown" ] && [ -d "html" ]; then
        cd "html"
    fi
    if [ "$app" == "unknown" ] && [ -f "index.html" ]; then
        app='HTML project'
        version='unknown'
    fi

    # return array
    declare -A ret=()
        ret[app]="$app"
    ret[version]="$version"

    # return the array
    local retDeclare=$(declare -p ret)
    echo "${retDeclare#*=}"

    # save start path
    cd "$startPath"

    return 0
}

